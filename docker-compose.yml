version: '3'

# to compile the services
# ./mvnw clean package -Dquarkus.container-image.build=true

volumes:
  db-data:
  mongo-data:
  neo4j-data:

networks:
  mensa-db-network:
  mensa-event-network:

services:
  zookeeper:
    restart: unless-stopped
    image: confluentinc/cp-zookeeper:7.0.1
    networks:
      - mensa-event-network
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    logging:
      driver: "json-file"
      options:
        max-size: "500k"
        max-file: "1"

  kafka:
    # view topics: kafka-console-consumer --bootstrap-server kafka:9092 --topic user_created --from-beginning
    restart: unless-stopped
    image: confluentinc/cp-kafka:5.3.1
    depends_on:
      - zookeeper
    networks:
      - mensa-event-network
    hostname: kafka
    ports:
      - "9092:9092"
    environment:
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://kafka:9092
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://kafka:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
    logging:
      driver: "json-file"
      options:
        max-size: "500k"
        max-file: "1"

  db:
    restart: unless-stopped
    image: postgres:13.3-alpine
    environment:
      POSTGRES_DB: mensa
      POSTGRES_USER: mensa
      POSTGRES_PASSWORD: mensa
    networks:
      - mensa-db-network
    ports:
      - "5432:5432"
    volumes:
      - type: volume
        source: db-data
        target: /var/lib/postgresql/data
    logging:
      driver: "json-file"
      options:
        max-size: "500k"
        max-file: "1"

  # docker exec -it mensa-mongo-1 mongo -u mensa -p mensa
  # use mensa-audit
  # show collections
  # db.payout.find().pretty
  # db.payment.find().pretty
  mongo:
    restart: unless-stopped
    image: mongo:5.0.9
    environment:
      MONGO_INITDB_ROOT_USERNAME: mensa
      MONGO_INITDB_ROOT_PASSWORD: mensa
    networks:
      - mensa-db-network
    ports:
      - "27017:27017"
    volumes:
      - type: volume
        source: mongo-data
        target: /data/db
    logging:
      driver: "json-file"
      options:
        max-size: "500k"
        max-file: "1"

  # docker exec -it mensa-neo4j-1 cypher-shell -u mensa -p mensa
  # match (n:Actors)-[r]->(m:Movies) return n.name AS Actors, m.title AS Movies, m.year AS MovieYear;
  neo4j:
    restart: unless-stopped
    image: neo4j:4.4.8
    environment:
      NEO4J_AUTH: neo4j/mensa
    networks:
      - mensa-db-network
    ports:
      - "7474:7474"
      - "7687:7687"
    volumes:
      - type: volume
        source: neo4j-data
        target: /data
    logging:
      driver: "json-file"
      options:
        max-size: "500k"
        max-file: "1"

  audit:
    restart: unless-stopped
    image: mensa/audit-service:1.0.0-SNAPSHOT
    depends_on:
      - mongo
      - kafka
    environment:
      MONGODB_CONNECTION: mongodb://mensa:mensa@mongo:27017
      NEO4J_HOST: bolt://neo4j:7687
      NEO4J_USER: neo4j
      NEO4J_PASSWORD: mensa
      KAFKA_BOOTSTRAP_SERVERS: kafka:9092
    networks:
      - mensa-db-network
      - mensa-event-network
    ports:
      - "5004:5005"
    logging:
      driver: "json-file"
      options:
        max-size: "500k"
        max-file: "1"

  email:
    restart: unless-stopped
    image: mensa/email-service:1.0.0-SNAPSHOT
    depends_on:
      - db
      - kafka
    environment:
      QUARKUS_DATASOURCE_JDBC_URL: jdbc:postgresql://db:5432/mensa
      QUARKUS_DATASOURCE_USERNAME: mensa
      QUARKUS_DATASOURCE_PASSWORD: mensa
      KAFKA_BOOTSTRAP_SERVERS: kafka:9092
    networks:
      - mensa-db-network
      - mensa-event-network
    ports:
      - "5001:5005"
    logging:
      driver: "json-file"
      options:
        max-size: "500k"
        max-file: "1"

  user:
    restart: unless-stopped
    image: mensa/user-service:1.0.0-SNAPSHOT
    depends_on:
      - db
      - kafka
    environment:
      QUARKUS_DATASOURCE_JDBC_URL: jdbc:postgresql://db:5432/mensa
      QUARKUS_DATASOURCE_USERNAME: mensa
      QUARKUS_DATASOURCE_PASSWORD: mensa
      QUARKUS_HIBERNATE_ORM_LOG_SQL: false
      QUARKUS_HIBERNATE_ORM_LOG_BIND_PARAMETERS: false
      KAFKA_BOOTSTRAP_SERVERS: kafka:9092
    networks:
      - mensa-db-network
      - mensa-event-network
    ports:
      - "8080:8080"
      - "5002:5005"
    logging:
      driver: "json-file"
      options:
        max-size: "500k"
        max-file: "1"

  payment:
    restart: unless-stopped
    image: mensa/payment-service:1.0.0-SNAPSHOT
    depends_on:
      - db
      - kafka
    environment:
      QUARKUS_DATASOURCE_JDBC_URL: jdbc:postgresql://db:5432/mensa
      QUARKUS_DATASOURCE_USERNAME: mensa
      QUARKUS_DATASOURCE_PASSWORD: mensa
      KAFKA_BOOTSTRAP_SERVERS: kafka:9092
    networks:
      - mensa-db-network
      - mensa-event-network
    ports:
      - "8081:8080"
      - "5003:5005"
    logging:
      driver: "json-file"
      options:
        max-size: "500k"
        max-file: "1"
